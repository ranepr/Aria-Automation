formatVersion: 1
inputs:
  username:
    type: string
    title: Username
    description: Please input OS Local Username
    default: cloud
  password:
    type: string
    title: Password
    description: Please input OS Local User password
    encrypted: true
    pattern: '[a-z0-9A-Z@#$]+'
    default: P@ssw0rd
  env:
    type: string
    title: Environment
    description: 'Please specify the Machine environment: Management, Production, Development, QA'
    default: prod
    enum:
      - dev
      - prod
  flavor:
    type: string
    title: Size
    description: 'Please select VM Size: Small (2 CPU, 4 GB RAM), Medium (4 CPU, 8 GB RAM), Large (4 CPU, 16 GB RAM)'
    default: Small
    enum:
      - Small
      - Medium
      - Large
  openport:
    type: string
    title: Open Port
    description: 'Please input inbound port to be opened (ex: 80,443)'
    default: 80,443
    pattern: ^\d*(\d,\d+)*$
  oucontainer:
    type: object
    title: Organization Unit
    $data: vro/data/inventory/AD:OrganizationalUnit
    properties:
      id:
        type: string
      type:
        type: string
resources:
  ADUSER:
    type: Custom.ADUser
    dependsOn:
      - VM
    properties:
      accountName: ${input.username}
      displayName: ${input.username}
      ouContainer: ${input.oucontainer}
      password: ${input.password}
      confirmPassword: ${input.password}
      changePasswordAtNextLogon: false
      domainName: ${propgroup.netconfig.domain}
  SG:
    type: Cloud.SecurityGroup
    properties:
      securityGroupType: new
      rules: '${input.openport == "" ? [] : [{"name": "allowedInbound", "ports": input.openport, "access": "Allow", "protocol": "TCP", "direction": "inbound", "source": "ANY"}] + [{"name": "allowedOutbound", "ports": input.openport, "access": "Allow", "protocol": "TCP", "direction": "outbound", "destination": "ANY"}]}'
  VM:
    type: Cloud.Machine
    properties:
      image: centos
      customizeGuestOs: false
      constraints:
        - tag: env:${input.env}
      flavor: ${input.flavor}
      networks:
        - network: ${resource.NET.id}
          assignment: static
          securityGroups:
            - ${resource.SG.id}
      cloudConfig: |
        users:
          - name: ${input.username}
            sudo: ['ALL=(ALL) NOPASSWD:ALL']
            groups: sudo
            shell: /bin/bash
            
        runcmd:
          - nmcli con add type ethernet con-name 'custom ens192' ifname ens192 ip4 ${self.networks[0].address}/${resource.NET.prefixLength} gw4 ${self.networks[0].gateway}
          - nmcli con mod 'custom ens192' ipv4.dns "${propgroup.netconfig.dns}"
          - nmcli con down 'System ens192'; nmcli con up 'custom ens192'
          - nmcli con del 'System ens192'
          - hostnamectl set-hostname ${to_upper(self.resourceName)}
          - nmcli networking off
          - nmcli networking on
          - yum install sssd realmd oddjob oddjob-mkhomedir adcli samba-common samba-common-tools krb5-workstation openldap-clients policycoreutils-python -y
          - echo ${input.username}:${input.password} | /usr/sbin/chpasswd
          - echo ${propgroup.domainadmin.password} | realm join -U ${propgroup.domainadmin.username} ${propgroup.netconfig.domain}
          - realm deny -a
          - realm permit ${env.requestedBy}@${propgroup.netconfig.domain}
          - sed -i -e "\$a${env.requestedBy}@${propgroup.netconfig.domain} ALL=(ALL) ALL" /etc/sudoers
          - sed -i "s/use_fully_qualified_names = True/use_fully_qualified_names = False/g" /etc/sssd/sssd.conf
          - systemctl daemon-reload
          - systemctl restart sssd
          
          - sleep 60
          - curl -L https://bootstrap.saltstack.com -o /root/install_salt.sh
          - sh /root/install_salt.sh -A ${propgroup.SaltStackConfiguration.masterAddress} -i ${to_upper(self.resourceName)}

          - sleep 60
          - salt-call grains.set vravm true
          - salt-call state.apply apache

          - ${join(map_by(split(input.openport, ","), x => "firewall-offline-cmd --zone=public --add-port=" + x + "/tcp"), ";")}
          - systemctl enable firewalld
          - systemctl start firewalld

          - touch /etc/cloud/cloud-init.disabled
      attachedDisks: []
  NET:
    type: Cloud.Network
    properties:
      networkType: existing
      constraints:
        - tag: net:${input.env}
